Приложение Калькулятор калорий (тестовое задание).

(Java 21, SpringBoot 3.4.4)

1. Пользователи. Добавление пользователей с параметрами:

- ID
- Имя
- Email
- Возраст
- Вес
- Рост
- Цель (Похудение, Поддержание, Набор массы)

На основе данных автоматически рассчитать дневную норму калорий
(можно использовать формулу Харриса-Бенедикта).
Формула для расчета ПБМ выглядит следующим образом:
Для женщин: 655,1 + (9,563 × вес в кг) + (1,85 × рост в см) - (4,676 × возраст в годах);
Для мужчин: 66,5 + (13,75 × вес в кг) + (5,003 × рост в см) - (6,775 × возраст в годах).

2. Блюда. Добавление блюд с параметрами:

- ID
- Название
- Количество калорий на порцию
- Белки/Жиры/Углеводы

3. Прием пищи. Пользователь может добавлять прием пищи со списком блюд

4. Отчеты (эндпоинты, без формирования документа):

- отчет за день с суммой всех калорий и приемов пищи;
- проверка, уложился ли пользователь в свою дневную норму калорий;
- история питания по дням.

____________________________________________

Настройка работы с проектом.

Скопировать или переиеновать файл
caloryintaketracker\src\main\resources\application.properties.template
в
caloryintaketracker\src\main\resources\application.properties

(то есть, удалить суффикс/расширение template)

в получившемся файле свойств приложения (application.properties)
настроить параметры подключения к PostgreSQL.
Для этого в строках

spring.datasource.username=POSTGRESS_USER_NAME
spring.datasource.password=POSTGRESS_USER_PASSWORD

вместо POSTGRESS_USER_NAME и POSTGRESS_USER_PASSWORD
ввести актуальные данные пользователя PostgreSQL

При необходимости настроить также параметры подключения
(удаленный сервер вместо "localhost" и порт, если отличается от 5432) в строке

spring.datasource.url=jdbc:postgresql://localhost:5432/caloriesdb?currentSchema=public

Перед первым запуском приложения создать в PostgreSQL пустую базу "caloriesdb".

Запустить проект.

_________________________

Взаимодействие по API
(запрос и тело Json, где необходимо)



Пользователи
http://localhost:8080/api/v0/users


Создать пользователя:

POST http://localhost:8080/api/v0/users
{
    "id": 0,
    "name": "John Connor",
    "email": "jconnor@mail.ru",
    "sex": "MALE",
    "birthDate": "1985-02-28",
    "weight": 78000,
    "height": 176,
    "aim": "LOOSING",
    "mealList": []
}

* входной id здесь не имеет значения, система назначает каждому новому принятому пользователю свой внутренний идентификатор, он возвращается в составе ответного Json в поле id.


Получить всех пользователей:

GET http://localhost:8080/api/v0/users



Получить пользователя по id:

GET http://localhost:8080/api/v0/users/4

Здесь 4 - идентификатор пользователя.



Исправить данные пользователя:

POST http://localhost:8080/api/v0/users/4
{
    "id": 4,
    "name": "John Connor",
    "email": "jconnor@mail.ru",
    "sex": "MALE",
    "birthDate": "1985-02-28",
    "weight": 78000,
    "height": 176,
    "aim": "LOOSING",
    "mealList": [
		{ "id" : 6 }, { "id" : 8} 
	]
}

здесь 4 - идентификатор пользователя, он должен совпадать в поле id и пути запроса; 6 и 8 - идентификаторы уже внесенных в систему приемов пищи



Удалить данные пользователя:

DELETE POST http://localhost:8080/api/v0/users/4

______

Блюда
http://localhost:8080/api/v0/dishes


Создать новое блюдо:

POST http://localhost:8080/api/v0/dishes
{
    "id" : 0,
    "name" : "Onion",
    "calories" : 130,
    "protein" : 150,
    "lipids" : 100,
    "carbohydrates" : 1370
}

* входной id здесь не имеет значения, система назначает каждому новому принятому блюду свой внутренний идентификатор, он возвращается в составе ответного Json в поле id.



Получить список всех блюд:

GET http://localhost:8080/api/v0/dishes



Получить блюдо по id:

GET http://localhost:8080/api/v0/dishes/4

Здесь 4 - идентификатор блюда.



Исправить данные по блюду:

POST http://localhost:8080/api/v0/dishes/4
{
    "id" : 4,
    "name" : "Onion",
    "calories" : 130,
    "protein" : 150,
    "lipids" : 100,
    "carbohydrates" : 1770
}

здесь 4 - идентификатор блюда, он должен совпадать в поле id и пути запроса.



Удалить данные блюда:

DELETE POST http://localhost:8080/api/v0/dishes/4

______

Приемы пищи 
http://localhost:8080/api/v0/meals


Создать прием пищи:

POST http://localhost:8080/api/v0/meals
{
    "id" : 0,
    "date": "2024-12-29",
    "dishList": [
        {
            "id": 3
        },
                {
            "id": 5
        },
                {
            "id": 7
        }
    ]
}

здесь 3, 5, 7 - идентификаторы уже созданных в системе блюд.
* входной id здесь не имеет значения, система назначает каждому новому принятому приему пищи свой внутренний идентификатор, он возвращается в составе ответного Json в поле id.



Получить все приемы пищи:

GET http://localhost:8080/api/v0/meals



Получить прием пищи по id:

GET http://localhost:8080/api/v0/meals/4

Здесь 4 - идентификатор приема пищи.



Исправить данные приема пищи:

POST http://localhost:8080/api/v0/meals/4
{
    "id" : 0,
    "date": "2024-12-29",
    "dishList": [
        {
            "id": 3
        },
                {
            "id": 5
        },
                {
            "id": 6
        }
    ]
}

здесь 3, 5, 7 - идентификаторы уже созданных в системе блюд.
4 - идентификатор приема пищи, он должен совпадать в поле id и пути запроса.



Удалить данные приема пищи:

DELETE POST http://localhost:8080/api/v0/meals/4

_______________________________________




